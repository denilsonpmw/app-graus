import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function createAffiliatePrimaryLinks() {
  try {
    console.log('üîç Buscando afiliados sem links prim√°rios...');

    // Buscar todos os afiliados
    const affiliates = await prisma.affiliate.findMany({
      include: {
        user: {
          select: {
            name: true,
            email: true
          }
        },
        affiliateLinks: true
      }
    });

    console.log(`üìã Encontrados ${affiliates.length} afiliados`);

    for (const affiliate of affiliates) {
      // Verificar se j√° tem link prim√°rio
      const primaryLink = affiliate.affiliateLinks.find((link: any) => link.isPrimary);

      if (!primaryLink) {
        console.log(`‚ûï Criando link prim√°rio para ${affiliate.user.name} (${affiliate.affiliateCode})`);

        await prisma.affiliateLink.create({
          data: {
            affiliateId: affiliate.id,
            isPrimary: true,
            campaignName: 'Link Principal',
            isActive: true
          }
        });

        console.log(`‚úÖ Link prim√°rio criado para ${affiliate.user.name}`);
      } else {
        console.log(`‚è≠Ô∏è  ${affiliate.user.name} j√° possui link prim√°rio`);
      }
    }

    console.log('üéâ Processo conclu√≠do!');
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createAffiliatePrimaryLinks();
